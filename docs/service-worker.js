const CACHE_NAME="story-app-cache-v4",DATA_CACHE_NAME="story-app-data-v4",DB_NAME="StoryAppDB",DB_VERSION=1,STORE_NAME="offline-stories",API_BASE_URL="https://story-api.dicoding.dev/v1",STORY_API_URL=`${API_BASE_URL}/stories`,urlsToCache=["/","/index.html","/manifest.json","/bundle.js","/icons/icon1.png","/icons/icon2.png","https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png","https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png","https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png","https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"];function openDB(){return new Promise((e,t)=>{const o=indexedDB.open(DB_NAME,1);o.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains(STORE_NAME)||t.createObjectStore(STORE_NAME,{keyPath:"id",autoIncrement:!0})},o.onsuccess=t=>{e(t.target.result)},o.onerror=e=>{t(e.target.error)}})}async function syncOfflineStories(){console.log("[SW] Starting sync of offline stories...");try{const e=(await openDB()).transaction(STORE_NAME,"readonly").objectStore(STORE_NAME),t=await new Promise((t,o)=>{const n=e.getAll();n.onsuccess=()=>t(n.result),n.onerror=()=>o(n.error)});if(0===t.length)return void console.log("[SW] No offline stories to sync");const o=await getTokenFromClient();if(!o)return void console.error("[SW] No token available for sync");for(const e of t)try{await uploadStoryToAPI(e,o),await deleteOfflineStory(e.id),console.log("[SW] Successfully synced story:",e.id)}catch(t){console.error("[SW] Failed to sync story:",e.id,t)}console.log("[SW] Sync completed")}catch(e){console.error("[SW] Sync failed:",e)}}async function getTokenFromClient(){const e=await self.clients.matchAll();return 0===e.length?null:new Promise(t=>{const o=new MessageChannel;o.port1.onmessage=e=>{t(e.data.token)},e[0].postMessage({type:"REQUEST_TOKEN"},[o.port2])})}async function uploadStoryToAPI(e,t){const o=e.photoBase64.split(",")[1],n=atob(o),s=new Array(n.length);for(let e=0;e<n.length;e++)s[e]=n.charCodeAt(e);const c=new Uint8Array(s),a=new Blob([c],{type:"image/jpeg"}),i=new FormData;i.append("description",e.description),i.append("photo",a,"photo.jpg"),e.lat&&i.append("lat",e.lat),e.lon&&i.append("lon",e.lon);const l=await fetch(STORY_API_URL,{method:"POST",headers:{Authorization:`Bearer ${t}`},body:i});if(!l.ok)throw new Error("Failed to upload story to API");return l.json()}async function deleteOfflineStory(e){const t=(await openDB()).transaction(STORE_NAME,"readwrite").objectStore(STORE_NAME);return new Promise((o,n)=>{const s=t.delete(e);s.onsuccess=()=>o(),s.onerror=()=>n(s.error)})}self.addEventListener("install",e=>{console.log("[SW] Installing..."),e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log("[SW] Caching app shell"),e.addAll(urlsToCache))).catch(e=>{console.error("[SW] Cache installation failed:",e)})),self.skipWaiting()}),self.addEventListener("activate",e=>{console.log("[SW] Activating..."),e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME&&e!==DATA_CACHE_NAME)return console.log("[SW] Deleting old cache:",e),caches.delete(e)})))),self.clients.claim()}),self.addEventListener("fetch",e=>{"GET"===e.request.method&&(e.request.url.includes(STORY_API_URL)?e.respondWith(fetch(e.request).then(t=>{const o=t.clone();return caches.open(DATA_CACHE_NAME).then(t=>{t.put(e.request,o)}),t}).catch(()=>caches.match(e.request).then(e=>e?(console.log("[SW] Serving API from cache (OFFLINE)"),e):caches.match("/index.html")))):e.respondWith(caches.match(e.request).then(t=>t?(console.log("[SW] Serving from cache:",e.request.url),t):fetch(e.request).then(t=>{if(200===t.status&&e.request.url.startsWith("http")){const o=t.clone();caches.open(CACHE_NAME).then(t=>{t.put(e.request,o)})}return t}).catch(()=>(console.log("[SW] Offline fallback to index.html"),caches.match("/index.html"))))))}),self.addEventListener("sync",e=>{console.log("[SW] Sync event triggered:",e.tag),"sync-offline-stories"===e.tag&&e.waitUntil(syncOfflineStories())}),self.addEventListener("push",e=>{console.log("[SW] Push notification received");let t={title:"New Story",body:"A new story has been added!",icon:BASE_PATH+"/icons/icon1.png",badge:BASE_PATH+"/icons/icon1.png"};if(e.data)try{const o=e.data.json();t={title:o.title||t.title,body:o.body||t.body,icon:o.icon||t.icon,badge:o.badge||t.badge}}catch(o){t.body=e.data.text()}e.waitUntil(self.registration.showNotification(t.title,{body:t.body,icon:t.icon,badge:t.badge}))}),self.addEventListener("notificationclick",e=>{console.log("[SW] Notification clicked"),e.notification.close(),e.waitUntil(self.clients.matchAll({type:"window",includeUncontrolled:!0}).then(e=>e.length>0?e[0].focus():self.clients.openWindow(BASE_PATH+"/")))});